a=2
b=3.5
s=a+b*1j
s=complex(a,b)#s=a+b*1j ile kompleks gösterebiliyorum ve complex komutuyla yine bunu gerçekleştiriyorum.
print(s)
---------------
a=input("Merhaba.Eğer Fahrenheit cinsinden sıcaklık değerini Celsiusa çevirmek istiyorsan 1'i, aksi için 0'ı girin: ")

if a:=0 :
    def F(C):
        return (9 / 5) * C + 32
    b=float(input("Bir değer giriniz: "))
    F1=F(b)
    print(F1)

elif a:=1 :##:= ile çalışıyo ama == de çalışmıyo.ben eşitlik olarak kullanmak istedim fakat atama olarak kullanmış oldum.
    def C(F):#https://stackoverflow.com/questions/26000198/what-does-colon-equal-in-python-mean
        return (F - 32) * (5 / 9)
    b = float(input("Bir değer giriniz: "))
    C1 = C(b)
    print(C1)
else:
    print("bende olmayan bi işlem komutu girdiniz :(")

print()
--------------
def F(C):
    return (9/5)*C+32

a=float(input("Bir değer giriniz: "))
F1=F(a)
print(F1)
------------------
d=[0,1,2,3,40]
for C in d:
    print(C)
print("degree of the list is",len(d))
#for döngüsünün nasıl olup da listeyi teker teker belirrtiğini anlamadım
#28 ocak:C,d'de diyo.sonra printliyo ve ddekiler tekrarlanan döngü içinde alt alta çıkıyo.i ile sıra sıra işleme alma,listedeki sırayı artırmasız yapıyo.hmmm??
---------
from numpy import *   #https://www.quora.com/What-is-the-difference-between-import-numpy-and-from-numpy-import-*
-----------------------
import numpy as np
import matplotlib.pyplot as plt
def f(t):
    return t**(2*np.exp(-t**2));

t=np.arange(0,3,3/150)
y=f(t)
plt.plot(t,y)
plt.show()
---------------------------
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.tri as tri

n_angles=48
n_radii=8
min_radius=0.25
radii=np.linspace(min_radius,0.95,n_radii)

angles=np.linspace(0,2*np.pi,n_angles,endpoint=False)
angles=np.repeat(angles[...,np.newaxis],n_radii,axis=1)
angles[:,1::2] +=np.pi/n_angles

x=(radii*np.cos(angles)).flatten()
y=(radii*np.sin(angles)).flatten()
z=(np.cos(radii)*np.cos(3*angles)).flatten()

triang=tri.Triangulation(x,y)

triang.set_mask(np.hypot(x[triang.triangles].mean(axis=1),
                         y[triang.triangles].mean(axis=1)
              <min_radius))

plt.figure()
plt.gca().set_aspect("equal")
plt.tricontourf(triang,z) #raise ValueError('z array must not contain non-finite values '
                          #ValueError: z array must not contain non-finite values within the triangulation
plt.colorbar()
plt.tricontour(triang,z,colors="k")
plt.title("contour plot of Delaunay triangulation")
plt.show()
----------------------------
for n in range(8):
    try:
        print(n/(n-4))
    except ZeroDivisionError as e:
        print("zero div. error has occured")
----------------------------
list=[2,4,6,8]
try:
    print(list[4])
except Exception as e:
    print("error:",e)
try:
    print(2/0)
except Exception as e:
    print("error:",e)
#If you have some suspicious code that may raise an exception, you can defend your program
#by placing the suspicious code in a try: block. After the try: block, include an except: statement,
# followed by a block of code which handles the problem as elegantly as possible.
    --------------------------
import sys

list=[]

try:
    for n in range(4):
        list.append(n)
        print(list)
        print(list[5])

except:
    e=sys.exc_info()#eğer buraya [0] veya [1] eklersem 1. veya 2. indeksteki hatayı veriyo.1.si hatanın sınıfı,2.si hatanın nedeni.
    print("error:",e)
    -------------------
list=[2,4,"u",6,"w",8]
numbers=[0,1,2,3,4,5,6,7,8,9]
for i in list:
    try:
        if i not in numbers:
            raise ZeroDivisionError
    except ZeroDivisionError as e:
        continue
    else:
        print("2**%s="%i,2**i)
#%s ile ona temasta olan atanan değişken stringin içine giriyo.
---------------------------------
a=input("enter the values: ")

print("list: ",list(a))
print("tuple: ",tuple(a))#bunun nasıl list komutuyla girdiğim sayıyı olduğu çıktısını alırım?


